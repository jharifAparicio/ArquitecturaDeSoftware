<test v="2.0"><p><t>Pátron Abstract Factory</t><d>este es un test para ver que tanto se aprendio del tema</d><a>jharif</a><c>20</c><e>TTDAEAoHkziwRYx</e><r>151267179481279</r></p><f/><c><c><t>0</t><p>¿Qué es el patrón Abstract Factory y en qué situaciones se recomienda su uso?</p><c>1211</c><r><o>Un patrón de diseño estructural que facilita la creación de interfaces gráficas.</o><o>Un patrón creacional que proporciona una interfaz para crear familias de objetos relacionados sin especificar sus clases concretas.</o><o>Un patrón de diseño que se usa exclusivamente para la creación de bases de datos.</o><o>Un patrón de comportamiento utilizado para gestionar eventos en una aplicación.</o></r></c><c><t>0</t><p>¿Cuál es la diferencia entre Abstract Factory y Factory Method?</p><c>1121</c><r><o>Abstract Factory solo se usa con bases de datos, mientras que Factory Method se usa en cualquier contexto.</o><o>Factory Method es un patrón estructural y Abstract Factory es un patrón de comportamiento</o><o>Abstract Factory proporciona una familia de objetos relacionados, mientras que Factory Method crea una única instancia de un producto.</o><o>No hay diferencia, ambos patrones hacen exactamente lo mismo.</o></r></c><c><t>0</t><p>¿Cuáles son los principales componentes de una Abstract Factory?</p><c>1121</c><r><o>Solo una clase base y clases concretas.</o><o>Un controlador centralizado que gestiona la creación de todos los objetos del sistema.</o><o>Una interfaz o clase abstracta que define la fábrica y múltiples fábricas concretas que implementan la interfaz.</o><o>Un solo método estático que genera instancias de cualquier clase.</o></r></c><c><t>0</t><p>¿Cómo se implementa el patrón Abstract Factory en lenguajes como Java o C#?</p><c>1121</c><r><o>Usando una clase estática con métodos que devuelvan objetos.</o><o>Definiendo una interfaz para la fábrica y creando implementaciones concretas que generen productos específicos.</o><o>Creando un constructor en cada clase para instanciar los objetos de la fábrica.</o><o>No es posible implementarlo en estos lenguajes.</o></r></c><c><t>0</t><p>¿Qué ventaja ofrece Abstract Factory en el diseño de software?</p><c>2111</c><r><o> Reduce el acoplamiento entre las clases concretas y permite crear familias de objetos de manera flexible.</o><o>Hace que el código sea más complejo y difícil de mantener.</o><o>No tiene ninguna ventaja significativa sobre instanciar objetos directamente.</o><o>Solo es útil en proyectos pequeños y simples.</o></r></c><c><t>0</t><p>¿Cuál es una desventaja del patrón Abstract Factory?</p><c>1112</c><r><o>Hace que la aplicación sea más lenta e ineficiente.</o><o>Solo funciona con lenguajes de programación orientados a objetos.</o><o>No permite la reutilización de código en ningún caso.</o><o>Puede aumentar la complejidad del código debido a la creación de muchas clases y fábricas.</o></r></c><c><t>0</t><p>¿Cómo se puede extender una Abstract Factory para admitir nuevos productos sin modificar su código?</p><c>1211</c><r><o>Modificando directamente todas las fábricas existentes.</o><o>Usando la herencia y creando nuevas implementaciones de la fábrica.</o><o>Eliminando la fábrica abstracta y creando instancias directamente en el código.</o><o>No es posible extender una Abstract Factory sin modificar su código.</o></r></c><c><t>0</t><p>¿Cómo se relaciona Abstract Factory con el Principio de Inversión de Dependencias (DIP) en SOLID?</p><c>1211</c><r><o>Abstract Factory viola el DIP porque introduce más clases en el sistema.</o><o>Abstract Factory permite depender de abstracciones en lugar de implementaciones concretas, cumpliendo con el DIP.</o><o> El DIP solo aplica a clases individuales y no a patrones de diseño.</o><o>No hay ninguna relación entre Abstract Factory y el DIP.</o></r></c><c><t>0</t><p>¿Qué ocurre si se añaden nuevos productos a una familia en un patrón Abstract Factory?</p><c>1211</c><r><o>Es necesario modificar todas las fábricas existentes para que puedan crear los nuevos productos.</o><o>No es necesario modificar el código cliente, ya que la fábrica y los productos son extensibles sin modificar el código base.</o><o>Los nuevos productos no pueden ser añadidos, ya que el patrón Abstract Factory solo soporta una cantidad fija de productos.</o><o>El código cliente necesita ser modificado para manejar los nuevos productos directamente.</o></r></c><c><t>0</t><p>¿Qué beneficios tiene usar Abstract Factory en un sistema con múltiples plataformas o configuraciones?</p><c>1112</c><r><o>Requiere que el código cliente conozca las implementaciones concretas para cada plataforma.</o><o>Hace que el sistema sea más lento debido a la necesidad de crear múltiples fábricas para cada plataforma.</o><o>No ofrece beneficios en sistemas que solo utilizan una plataforma.</o><o>Permite crear objetos dependientes del sistema operativo sin que el código cliente tenga que preocuparse por la implementación concreta de cada plataforma.</o></r></c></c><i/></test>